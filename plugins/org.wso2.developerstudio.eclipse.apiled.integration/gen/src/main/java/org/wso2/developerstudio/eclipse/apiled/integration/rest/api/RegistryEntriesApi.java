/*
 * WSO2 API Manager - Endpoint Registry
 * This specifies a **RESTful API** for Enpoint Registry. 
 *
 * OpenAPI spec version: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.developerstudio.eclipse.apiled.integration.rest.api;

import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiCallback;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiClient;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiException;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiResponse;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.Configuration;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.Pair;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ProgressRequestBody;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.developerstudio.eclipse.apiled.integration.rest.model.Error;
import java.io.File;
import org.wso2.developerstudio.eclipse.apiled.integration.rest.model.RegistryEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistryEntriesApi {
    private ApiClient apiClient;

    public RegistryEntriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistryEntriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRegistryEntry
     * @param registryId uuid of the registry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRegistryEntryCall(String registryId, RegistryEntry registryEntry, File definitionFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}/entry"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (registryEntry != null) {
            localVarFormParams.put("registryEntry", registryEntry);
        }

        if (definitionFile != null) {
            localVarFormParams.put("definitionFile", definitionFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRegistryEntryValidateBeforeCall(String registryId, RegistryEntry registryEntry, File definitionFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling createRegistryEntry(Async)");
        }
        
        // verify the required parameter 'registryEntry' is set
        if (registryEntry == null) {
            throw new ApiException("Missing the required parameter 'registryEntry' when calling createRegistryEntry(Async)");
        }
        
        // verify the required parameter 'definitionFile' is set
        if (definitionFile == null) {
            throw new ApiException("Missing the required parameter 'definitionFile' when calling createRegistryEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = createRegistryEntryCall(registryId, registryEntry, definitionFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @return RegistryEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegistryEntry createRegistryEntry(String registryId, RegistryEntry registryEntry, File definitionFile) throws ApiException {
        ApiResponse<RegistryEntry> resp = createRegistryEntryWithHttpInfo(registryId, registryEntry, definitionFile);
        return resp.getData();
    }

    /**
     * Create a new Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @return ApiResponse&lt;RegistryEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegistryEntry> createRegistryEntryWithHttpInfo(String registryId, RegistryEntry registryEntry, File definitionFile) throws ApiException {
        com.squareup.okhttp.Call call = createRegistryEntryValidateBeforeCall(registryId, registryEntry, definitionFile, null, null);
        Type localVarReturnType = new TypeToken<RegistryEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Registry Entry (asynchronously)
     * 
     * @param registryId uuid of the registry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRegistryEntryAsync(String registryId, RegistryEntry registryEntry, File definitionFile, final ApiCallback<RegistryEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRegistryEntryValidateBeforeCall(registryId, registryEntry, definitionFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegistryEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRegistryEntry
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRegistryEntryCall(String registryId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}/entries/{entryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRegistryEntryValidateBeforeCall(String registryId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling deleteRegistryEntry(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteRegistryEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRegistryEntryCall(registryId, entryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an existing Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRegistryEntry(String registryId, String entryId) throws ApiException {
        deleteRegistryEntryWithHttpInfo(registryId, entryId);
    }

    /**
     * Delete an existing Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRegistryEntryWithHttpInfo(String registryId, String entryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRegistryEntryValidateBeforeCall(registryId, entryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing Registry Entry (asynchronously)
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRegistryEntryAsync(String registryId, String entryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRegistryEntryValidateBeforeCall(registryId, entryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllEntriesInRegistry
     * @param registryId uuid of the Registry (required)
     * @param query **Search condition**.  You can search for a registry entry by specifying the entry name as \&quot;query\&quot; attribute.  Eg. \&quot;pizzaServer\&quot; will match a registry entry if the name is exactly \&quot;pizzaServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllEntriesInRegistryCall(String registryId, String query, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}/entries"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllEntriesInRegistryValidateBeforeCall(String registryId, String query, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getAllEntriesInRegistry(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllEntriesInRegistryCall(registryId, query, sortBy, sortOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All entries in the registry
     * 
     * @param registryId uuid of the Registry (required)
     * @param query **Search condition**.  You can search for a registry entry by specifying the entry name as \&quot;query\&quot; attribute.  Eg. \&quot;pizzaServer\&quot; will match a registry entry if the name is exactly \&quot;pizzaServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @return List&lt;RegistryEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RegistryEntry> getAllEntriesInRegistry(String registryId, String query, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<List<RegistryEntry>> resp = getAllEntriesInRegistryWithHttpInfo(registryId, query, sortBy, sortOrder);
        return resp.getData();
    }

    /**
     * Get All entries in the registry
     * 
     * @param registryId uuid of the Registry (required)
     * @param query **Search condition**.  You can search for a registry entry by specifying the entry name as \&quot;query\&quot; attribute.  Eg. \&quot;pizzaServer\&quot; will match a registry entry if the name is exactly \&quot;pizzaServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @return ApiResponse&lt;List&lt;RegistryEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RegistryEntry>> getAllEntriesInRegistryWithHttpInfo(String registryId, String query, String sortBy, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getAllEntriesInRegistryValidateBeforeCall(registryId, query, sortBy, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<List<RegistryEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All entries in the registry (asynchronously)
     * 
     * @param registryId uuid of the Registry (required)
     * @param query **Search condition**.  You can search for a registry entry by specifying the entry name as \&quot;query\&quot; attribute.  Eg. \&quot;pizzaServer\&quot; will match a registry entry if the name is exactly \&quot;pizzaServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllEntriesInRegistryAsync(String registryId, String query, String sortBy, String sortOrder, final ApiCallback<List<RegistryEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllEntriesInRegistryValidateBeforeCall(registryId, query, sortBy, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RegistryEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRegistryEntryByUuid
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRegistryEntryByUuidCall(String registryId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}/entries/{entryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRegistryEntryByUuidValidateBeforeCall(String registryId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getRegistryEntryByUuid(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling getRegistryEntryByUuid(Async)");
        }
        

        com.squareup.okhttp.Call call = getRegistryEntryByUuidCall(registryId, entryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a specific Entry in a Registry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @return List&lt;RegistryEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RegistryEntry> getRegistryEntryByUuid(String registryId, String entryId) throws ApiException {
        ApiResponse<List<RegistryEntry>> resp = getRegistryEntryByUuidWithHttpInfo(registryId, entryId);
        return resp.getData();
    }

    /**
     * Retrieve a specific Entry in a Registry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @return ApiResponse&lt;List&lt;RegistryEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RegistryEntry>> getRegistryEntryByUuidWithHttpInfo(String registryId, String entryId) throws ApiException {
        com.squareup.okhttp.Call call = getRegistryEntryByUuidValidateBeforeCall(registryId, entryId, null, null);
        Type localVarReturnType = new TypeToken<List<RegistryEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a specific Entry in a Registry (asynchronously)
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRegistryEntryByUuidAsync(String registryId, String entryId, final ApiCallback<List<RegistryEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRegistryEntryByUuidValidateBeforeCall(registryId, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RegistryEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRegistryEntry
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRegistryEntryCall(String registryId, String entryId, RegistryEntry registryEntry, File definitionFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}/entries/{entryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (registryEntry != null) {
            localVarFormParams.put("registryEntry", registryEntry);
        }

        if (definitionFile != null) {
            localVarFormParams.put("definitionFile", definitionFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRegistryEntryValidateBeforeCall(String registryId, String entryId, RegistryEntry registryEntry, File definitionFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling updateRegistryEntry(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateRegistryEntry(Async)");
        }
        
        // verify the required parameter 'registryEntry' is set
        if (registryEntry == null) {
            throw new ApiException("Missing the required parameter 'registryEntry' when calling updateRegistryEntry(Async)");
        }
        
        // verify the required parameter 'definitionFile' is set
        if (definitionFile == null) {
            throw new ApiException("Missing the required parameter 'definitionFile' when calling updateRegistryEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRegistryEntryCall(registryId, entryId, registryEntry, definitionFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an existing Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @return RegistryEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegistryEntry updateRegistryEntry(String registryId, String entryId, RegistryEntry registryEntry, File definitionFile) throws ApiException {
        ApiResponse<RegistryEntry> resp = updateRegistryEntryWithHttpInfo(registryId, entryId, registryEntry, definitionFile);
        return resp.getData();
    }

    /**
     * Update an existing Registry Entry
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @return ApiResponse&lt;RegistryEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegistryEntry> updateRegistryEntryWithHttpInfo(String registryId, String entryId, RegistryEntry registryEntry, File definitionFile) throws ApiException {
        com.squareup.okhttp.Call call = updateRegistryEntryValidateBeforeCall(registryId, entryId, registryEntry, definitionFile, null, null);
        Type localVarReturnType = new TypeToken<RegistryEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Registry Entry (asynchronously)
     * 
     * @param registryId uuid of the registry (required)
     * @param entryId uuid of the registry entry (required)
     * @param registryEntry  (required)
     * @param definitionFile  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRegistryEntryAsync(String registryId, String entryId, RegistryEntry registryEntry, File definitionFile, final ApiCallback<RegistryEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRegistryEntryValidateBeforeCall(registryId, entryId, registryEntry, definitionFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegistryEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
