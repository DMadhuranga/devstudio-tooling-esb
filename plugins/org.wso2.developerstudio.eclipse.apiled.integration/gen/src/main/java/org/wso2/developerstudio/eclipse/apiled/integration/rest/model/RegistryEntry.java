/*
 * WSO2 API Manager - Endpoint Registry
 * This specifies a **RESTful API** for Enpoint Registry. 
 *
 * OpenAPI spec version: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.developerstudio.eclipse.apiled.integration.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The Registry Entry object
 */
@ApiModel(description = "The Registry Entry object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-13T18:54:44.705+05:30[Asia/Colombo]")
public class RegistryEntry {
  public static final String SERIALIZED_NAME_ENTRY_NAME = "entryName";
  @SerializedName(SERIALIZED_NAME_ENTRY_NAME)
  private String entryName;

  public static final String SERIALIZED_NAME_SERVICE_URL = "service-url";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  /**
   * Business Category of the Endpoint
   */
  @JsonAdapter(ServiceCategoryEnum.Adapter.class)
  public enum ServiceCategoryEnum {
    UTILILTY("UTILILTY"),
    
    EDGE("EDGE"),
    
    DOMAIN("DOMAIN");

    private String value;

    ServiceCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceCategoryEnum fromValue(String text) {
      for (ServiceCategoryEnum b : ServiceCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_CATEGORY = "serviceCategory";
  @SerializedName(SERIALIZED_NAME_SERVICE_CATEGORY)
  private ServiceCategoryEnum serviceCategory;

  /**
   * Type of the backend connecting to
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    REST("REST"),
    
    SOAP_1_1("SOAP_1_1"),
    
    GQL("GQL"),
    
    WS("WS");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String text) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private ServiceTypeEnum serviceType;

  /**
   * The type of the provided API definition
   */
  @JsonAdapter(DefinitionTypeEnum.Adapter.class)
  public enum DefinitionTypeEnum {
    OAS("OAS"),
    
    WSDL1("WSDL1"),
    
    WSDL2("WSDL2"),
    
    GQL_SDL("GQL-SDL");

    private String value;

    DefinitionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefinitionTypeEnum fromValue(String text) {
      for (DefinitionTypeEnum b : DefinitionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<DefinitionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefinitionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefinitionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DefinitionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFINITION_TYPE = "definitionType";
  @SerializedName(SERIALIZED_NAME_DEFINITION_TYPE)
  private DefinitionTypeEnum definitionType;

  public static final String SERIALIZED_NAME_DEFINITION_URL = "definitionUrl";
  @SerializedName(SERIALIZED_NAME_DEFINITION_URL)
  private String definitionUrl;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public RegistryEntry entryName(String entryName) {
    this.entryName = entryName;
    return this;
  }

   /**
   * Get entryName
   * @return entryName
  **/
  @ApiModelProperty(example = "Pizzashack-Endpoint", value = "")
  public String getEntryName() {
    return entryName;
  }

  public void setEntryName(String entryName) {
    this.entryName = entryName;
  }

  public RegistryEntry serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

   /**
   * Get serviceUrl
   * @return serviceUrl
  **/
  @ApiModelProperty(example = "http://localhost/pizzashack", value = "")
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }

  public RegistryEntry serviceCategory(ServiceCategoryEnum serviceCategory) {
    this.serviceCategory = serviceCategory;
    return this;
  }

   /**
   * Business Category of the Endpoint
   * @return serviceCategory
  **/
  @ApiModelProperty(value = "Business Category of the Endpoint")
  public ServiceCategoryEnum getServiceCategory() {
    return serviceCategory;
  }

  public void setServiceCategory(ServiceCategoryEnum serviceCategory) {
    this.serviceCategory = serviceCategory;
  }

  public RegistryEntry serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Type of the backend connecting to
   * @return serviceType
  **/
  @ApiModelProperty(example = "REST", value = "Type of the backend connecting to")
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }

  public RegistryEntry definitionType(DefinitionTypeEnum definitionType) {
    this.definitionType = definitionType;
    return this;
  }

   /**
   * The type of the provided API definition
   * @return definitionType
  **/
  @ApiModelProperty(example = "OAS", value = "The type of the provided API definition")
  public DefinitionTypeEnum getDefinitionType() {
    return definitionType;
  }

  public void setDefinitionType(DefinitionTypeEnum definitionType) {
    this.definitionType = definitionType;
  }

  public RegistryEntry definitionUrl(String definitionUrl) {
    this.definitionUrl = definitionUrl;
    return this;
  }

   /**
   * Get definitionUrl
   * @return definitionUrl
  **/
  @ApiModelProperty(example = "http://localhost/pizzashack?swagger.json", value = "")
  public String getDefinitionUrl() {
    return definitionUrl;
  }

  public void setDefinitionUrl(String definitionUrl) {
    this.definitionUrl = definitionUrl;
  }

  public RegistryEntry metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(example = "{ \"mutualTLS\" : true }", value = "")
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryEntry registryEntry = (RegistryEntry) o;
    return Objects.equals(this.entryName, registryEntry.entryName) &&
        Objects.equals(this.serviceUrl, registryEntry.serviceUrl) &&
        Objects.equals(this.serviceCategory, registryEntry.serviceCategory) &&
        Objects.equals(this.serviceType, registryEntry.serviceType) &&
        Objects.equals(this.definitionType, registryEntry.definitionType) &&
        Objects.equals(this.definitionUrl, registryEntry.definitionUrl) &&
        Objects.equals(this.metadata, registryEntry.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryName, serviceUrl, serviceCategory, serviceType, definitionType, definitionUrl, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryEntry {\n");
    
    sb.append("    entryName: ").append(toIndentedString(entryName)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("    serviceCategory: ").append(toIndentedString(serviceCategory)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    definitionType: ").append(toIndentedString(definitionType)).append("\n");
    sb.append("    definitionUrl: ").append(toIndentedString(definitionUrl)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

