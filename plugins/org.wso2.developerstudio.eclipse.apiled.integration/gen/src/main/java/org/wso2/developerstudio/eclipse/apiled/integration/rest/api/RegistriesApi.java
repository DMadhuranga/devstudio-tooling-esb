/*
 * WSO2 API Manager - Endpoint Registry
 * This specifies a **RESTful API** for Enpoint Registry. 
 *
 * OpenAPI spec version: 0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.developerstudio.eclipse.apiled.integration.rest.api;

import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiCallback;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiClient;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiException;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ApiResponse;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.Configuration;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.Pair;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ProgressRequestBody;
import org.wso2.developerstudio.eclipse.apiled.integration.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.developerstudio.eclipse.apiled.integration.rest.model.Error;
import org.wso2.developerstudio.eclipse.apiled.integration.rest.model.Registry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistriesApi {
    private ApiClient apiClient;

    public RegistriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteRegistry
     * @param registryId uuid of the Registry (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRegistryCall(String registryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRegistryValidateBeforeCall(String registryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling deleteRegistry(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRegistryCall(registryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a registry
     * 
     * @param registryId uuid of the Registry (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRegistry(String registryId) throws ApiException {
        deleteRegistryWithHttpInfo(registryId);
    }

    /**
     * Delete a registry
     * 
     * @param registryId uuid of the Registry (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRegistryWithHttpInfo(String registryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRegistryValidateBeforeCall(registryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a registry (asynchronously)
     * 
     * @param registryId uuid of the Registry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRegistryAsync(String registryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRegistryValidateBeforeCall(registryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRegistryByUUID
     * @param registryId ID of the Registry (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRegistryByUUIDCall(String registryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries/{registryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRegistryByUUIDValidateBeforeCall(String registryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getRegistryByUUID(Async)");
        }
        

        com.squareup.okhttp.Call call = getRegistryByUUIDCall(registryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get details of a Registry
     * Using this operation, you can retrieve complete details of a single Registry using the RegistryId. 
     * @param registryId ID of the Registry (required)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Registry getRegistryByUUID(String registryId) throws ApiException {
        ApiResponse<Registry> resp = getRegistryByUUIDWithHttpInfo(registryId);
        return resp.getData();
    }

    /**
     * Get details of a Registry
     * Using this operation, you can retrieve complete details of a single Registry using the RegistryId. 
     * @param registryId ID of the Registry (required)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Registry> getRegistryByUUIDWithHttpInfo(String registryId) throws ApiException {
        com.squareup.okhttp.Call call = getRegistryByUUIDValidateBeforeCall(registryId, null, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details of a Registry (asynchronously)
     * Using this operation, you can retrieve complete details of a single Registry using the RegistryId. 
     * @param registryId ID of the Registry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRegistryByUUIDAsync(String registryId, final ApiCallback<Registry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRegistryByUUIDValidateBeforeCall(registryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesGet
     * @param query **Search condition**.  You can search for a registry by specifying the registry name as \&quot;query\&quot; attribute.  Eg. \&quot;prodServer\&quot; will match a registry entry if the name is exactly \&quot;prodServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesGetCall(String query, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesGetValidateBeforeCall(String query, String sortBy, String sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = registriesGetCall(query, sortBy, sortOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve Registries 
     * This operation provides you an array of available Registries. 
     * @param query **Search condition**.  You can search for a registry by specifying the registry name as \&quot;query\&quot; attribute.  Eg. \&quot;prodServer\&quot; will match a registry entry if the name is exactly \&quot;prodServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @return List&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Registry> registriesGet(String query, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<List<Registry>> resp = registriesGetWithHttpInfo(query, sortBy, sortOrder);
        return resp.getData();
    }

    /**
     * Retrieve Registries 
     * This operation provides you an array of available Registries. 
     * @param query **Search condition**.  You can search for a registry by specifying the registry name as \&quot;query\&quot; attribute.  Eg. \&quot;prodServer\&quot; will match a registry entry if the name is exactly \&quot;prodServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @return ApiResponse&lt;List&lt;Registry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Registry>> registriesGetWithHttpInfo(String query, String sortBy, String sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = registriesGetValidateBeforeCall(query, sortBy, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Registries  (asynchronously)
     * This operation provides you an array of available Registries. 
     * @param query **Search condition**.  You can search for a registry by specifying the registry name as \&quot;query\&quot; attribute.  Eg. \&quot;prodServer\&quot; will match a registry entry if the name is exactly \&quot;prodServer\&quot;.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesGetAsync(String query, String sortBy, String sortOrder, final ApiCallback<List<Registry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesGetValidateBeforeCall(query, sortBy, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesPost
     * @param registry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesPostCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registry;

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesPostValidateBeforeCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = registriesPostCall(registry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Registry
     * This operation can be used to create a new Registry specifying the details of the Registry in the payload. 
     * @param registry  (optional)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Registry registriesPost(Registry registry) throws ApiException {
        ApiResponse<Registry> resp = registriesPostWithHttpInfo(registry);
        return resp.getData();
    }

    /**
     * Create a new Registry
     * This operation can be used to create a new Registry specifying the details of the Registry in the payload. 
     * @param registry  (optional)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Registry> registriesPostWithHttpInfo(Registry registry) throws ApiException {
        com.squareup.okhttp.Call call = registriesPostValidateBeforeCall(registry, null, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Registry (asynchronously)
     * This operation can be used to create a new Registry specifying the details of the Registry in the payload. 
     * @param registry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesPostAsync(Registry registry, final ApiCallback<Registry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesPostValidateBeforeCall(registry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRegistry
     * @param registryId ID of the Registry (required)
     * @param registry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRegistryCall(String registryId, Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registry;

        // create path and map variables
        String localVarPath = "/registries/{registryId}"
            .replaceAll("\\{" + "registryId" + "\\}", apiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRegistryValidateBeforeCall(String registryId, Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling updateRegistry(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRegistryCall(registryId, registry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an existing Registry
     * 
     * @param registryId ID of the Registry (required)
     * @param registry  (optional)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Registry updateRegistry(String registryId, Registry registry) throws ApiException {
        ApiResponse<Registry> resp = updateRegistryWithHttpInfo(registryId, registry);
        return resp.getData();
    }

    /**
     * Update an existing Registry
     * 
     * @param registryId ID of the Registry (required)
     * @param registry  (optional)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Registry> updateRegistryWithHttpInfo(String registryId, Registry registry) throws ApiException {
        com.squareup.okhttp.Call call = updateRegistryValidateBeforeCall(registryId, registry, null, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing Registry (asynchronously)
     * 
     * @param registryId ID of the Registry (required)
     * @param registry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRegistryAsync(String registryId, Registry registry, final ApiCallback<Registry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRegistryValidateBeforeCall(registryId, registry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
